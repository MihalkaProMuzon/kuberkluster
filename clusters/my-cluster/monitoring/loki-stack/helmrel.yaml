apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: loki-stack
spec:
  interval: 1m
  chart:
    spec:
      chart: loki-stack
      sourceRef:
        kind: HelmRepository
        name: grafana-rep
        namespace: monitoring
      interval: 1m
      
  values:
    loki:
      enabled: true
      image:
        tag: 3.1.0
      isDefault: true
      url: http://{{(include "loki.serviceName" .)}}:{{ .Values.loki.service.port }}
      readinessProbe:
        httpGet:
          path: /ready
          port: http-metrics
        initialDelaySeconds: 45
      livenessProbe:
        httpGet:
          path: /ready
          port: http-metrics
        initialDelaySeconds: 45
      datasource:
        jsonData: "{}"
        uid: ""

      compactor:
        shared_store: filesystem
        working_directory: /data/loki/boltdb-shipper-compactor
      ingester:
        chunk_block_size: 262144
        chunk_idle_period: 3m
        chunk_retain_period: 1m
        lifecycler:
          ring:
            replication_factor: 1
        max_transfer_retries: 0
        wal:
          dir: /data/loki/wal

      # deploymentMode: SimpleScalable
      # common_config:
      #   replication_factor: 3

      fullnameOverride: loki-vh

      # storage:
      #   # Loki requires a bucket for chunks and the ruler. GEL requires a third bucket for the admin API.
      #   # Please provide these values if you are using object storage.
      #   bucketNames:
      #     chunks: ls-chunks
      #     ruler: ls-ruler
      #     admin: ls-admin
      #   type: s3
      #   s3:
      #     # s3: http://VP2YX1j3Ci8cwXlLnccW:Hn3mhFXpvcXzhIELkx0j3OMeDkzixdOmXFz7gWsR@192.168.0.243:9000/loki-stack-full
      #     endpoint: http://192.168.0.243:9000
      #     region: Skibidi
      #     secretAccessKey: Hn3mhFXpvcXzhIELkx0j3OMeDkzixdOmXFz7gWsR
      #     accessKeyId: VP2YX1j3Ci8cwXlLnccW
      #     # signatureVersion: null
      #     s3ForcePathStyle: true
      #     insecure: false
      #     # http_config: {}
      #     # -- Check https://grafana.com/docs/loki/latest/configure/#s3_storage_config for more info on how to provide a backoff_config
      #     backoff_config:
      #       min_backoff: 100ms
      #       max_backoff: 10s
      #       max_retries: 5
      #     # disable_dualstack: false

      # schema–°onfig:
      #   configs:
      #     - from: "2021-05-12"
      #       store: tsdb
      #       object_store: s3
      #       schema: v11
      #       index:
      #         prefix: index_
      #         period: 24h

      # config:
      #   storage_config:
      #     aws:
      #       s3: http://VP2YX1j3Ci8cwXlLnccW:Hn3mhFXpvcXzhIELkx0j3OMeDkzixdOmXFz7gWsR@192.168.0.243:9000/loki-stack-full
      #       s3forcepathstyle: true
      #       region: Skibidi
      #     tsdb_shipper:
      #       active_index_directory: /data/loki/index
      #       cache_location: /data/loki/index_cache
      #       cache_ttl: 24h 

        

    promtail:
      enabled: true
      config:
        logLevel: info
        serverPort: 3101
        clients:
          - url: http://{{ .Release.Name }}:3100/loki/api/v1/push
          
    grafana:
      enabled: true
      sidecar:
        datasources:
          label: ""
          labelValue: ""
          enabled: true
          maxLines: 1000
      image:
        tag: 10.3.3
      persistence:
        type: pvc
        enabled: true
        storageClassName: minidata
        accessModes:
          - ReadWriteOnce
        size: 1Gi
      
      grafana.ini:
        server:
          root_url: "https://komplikter-sub3.servehttp.com"
      env: 
        GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION: true
        GF_AUTH_GENERIC_OAUTH_ENABLED: true
        GF_AUTH_GENERIC_OAUTH_NAME: Keycloak-OAuth
        GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: true
        GF_AUTH_GENERIC_OAUTH_CLIENT_ID: grafana
        # GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: dMcZLgZeEYMww7vXbUkBNB3KatJKIVc1
        GF_AUTH_GENERIC_OAUTH_SCOPES: "openid email profile offline_access roles"
        GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_PATH: email
        GF_AUTH_GENERIC_OAUTH_LOGIN_ATTRIBUTE_PATH: username
        GF_AUTH_GENERIC_OAUTH_NAME_ATTRIBUTE_PATH: full_name
        GF_AUTH_GENERIC_OAUTH_AUTH_URL: https://komplikter-sub1.servehttp.com/realms/kuberkluster/protocol/openid-connect/auth
        GF_AUTH_GENERIC_OAUTH_TOKEN_URL: https://komplikter-sub1.servehttp.com/realms/kuberkluster/protocol/openid-connect/token
        GF_AUTH_GENERIC_OAUTH_API_URL: https://komplikter-sub1.servehttp.com/realms/kuberkluster/protocol/openid-connect/userinfo
        GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
        GF_AUTH_GENERIC_OAUTH_ALLOW_ASSING_GRAFANA_ADMIN: true
        GF_AUTH_GENERIC_OAUTH_USE_REFRESH_TOKEN: true
        GF_AUTH_GENERIC_OAUTH_GROUPS_ATTRIBUTE_PATH: groups

      envFromSecrets:
        - name: monitoring-secret

      nodeSelector:
        storage: "yes"


    prometheus:
      enabled: true
      isDefault: false
      url: http://{{ include "prometheus.fullname" .}}:{{ .Values.prometheus.server.service.servicePort }}{{ .Values.prometheus.server.prefixURL }}
      datasource:
        jsonData: "{}"
      server:
        nodeSelector:
          storage: "yes"